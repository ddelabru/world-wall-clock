import trio
import typing
from .abstract_loop import EventLoop
from _typeshed import Incomplete
from collections.abc import Callable

class _TrioIdleCallbackInstrument(trio.abc.Instrument):
    idle_callbacks: Incomplete
    def __init__(self, idle_callbacks) -> None: ...
    def before_io_wait(self, timeout) -> None: ...

class TrioEventLoop(EventLoop):
    def __init__(self) -> None: ...
    def alarm(self, seconds: float, callback: Callable[[], typing.Any]): ...
    def enter_idle(self, callback: Callable[[], typing.Any]) -> int: ...
    def remove_alarm(self, handle): ...
    def remove_enter_idle(self, handle) -> bool: ...
    def remove_watch_file(self, handle: trio.CancelScope) -> bool: ...
    def run(self) -> None: ...
    async def run_async(self) -> None: ...
    def watch_file(
        self, fd: int, callback: Callable[[], typing.Any]
    ) -> trio.CancelScope: ...
