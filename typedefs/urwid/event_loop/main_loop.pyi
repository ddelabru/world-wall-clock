# mypy: ignore-errors

from collections.abc import Callable, Iterable

from _typeshed import Incomplete
from urwid.display_common import BaseScreen
from urwid.widget import Widget

class CantUseExternalLoop(Exception): ...

class MainLoop:
    handle_mouse: Incomplete
    screen: Incomplete
    screen_size: Incomplete
    event_loop: Incomplete
    def __init__(
        self,
        widget: Widget,
        palette=...,
        screen: BaseScreen | None = ...,
        handle_mouse: bool = ...,
        input_filter: Callable[[list[str], list[int]], list[str]] | None = ...,
        unhandled_input: Callable[[str | tuple[str, int, int, int]], bool] | None = ...,
        event_loop: Incomplete | None = ...,
        pop_ups: bool = ...,
    ) -> None: ...
    @property
    def widget(self) -> Widget: ...
    @property
    def pop_ups(self): ...
    def set_alarm_in(self, sec, callback, user_data: Incomplete | None = ...): ...
    def set_alarm_at(self, tm, callback, user_data: Incomplete | None = ...): ...
    def remove_alarm(self, handle): ...
    def watch_pipe(self, callback): ...
    def remove_watch_pipe(self, write_fd): ...
    def watch_file(self, fd, callback): ...
    def remove_watch_file(self, handle): ...
    def run(self) -> None: ...
    idle_handle: Incomplete
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def process_input(
        self, keys: Iterable[str | tuple[str, int, int, int]]
    ) -> bool: ...
    def input_filter(self, keys: list[str], raw: list[int]) -> list[str]: ...
    def unhandled_input(self, data: str | tuple[str, int, int, int]) -> bool: ...
    def entering_idle(self) -> None: ...
    def draw_screen(self) -> None: ...
