import typing
from .abstract_loop import EventLoop
from collections.abc import Callable
from tornado import ioloop
from typing_extensions import Literal

class TornadoEventLoop(EventLoop):
    def __init__(self, loop: ioloop.IOLoop | None = ...) -> None: ...
    def alarm(self, seconds: float, callback: Callable[[], typing.Any]): ...
    def remove_alarm(self, handle: object) -> bool: ...
    def watch_file(self, fd: int, callback: Callable[[], _T]) -> int: ...
    def remove_watch_file(self, handle: int) -> bool: ...
    def enter_idle(self, callback: Callable[[], typing.Any]) -> int: ...
    def remove_enter_idle(self, handle: int) -> bool: ...
    def handle_exit(
        self, f: Callable[_Spec, _T]
    ) -> Callable[_Spec, _T | Literal[False]]: ...
    def run(self) -> None: ...
