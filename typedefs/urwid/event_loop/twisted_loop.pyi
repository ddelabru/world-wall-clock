import typing
from .abstract_loop import EventLoop
from _typeshed import Incomplete
from collections.abc import Callable
from twisted.internet.abstract import FileDescriptor
from twisted.internet.interfaces import IReactorFDSet

class _TwistedInputDescriptor(FileDescriptor):
    cb: Incomplete
    def __init__(
        self, reactor: IReactorFDSet, fd: int, cb: Callable[[], typing.Any]
    ) -> None: ...
    def fileno(self) -> int: ...
    def doRead(self): ...

class TwistedEventLoop(EventLoop):
    reactor: Incomplete
    manage_reactor: Incomplete
    def __init__(
        self, reactor: Incomplete | None = ..., manage_reactor: bool = ...
    ) -> None: ...
    def alarm(self, seconds: float, callback: Callable[[], typing.Any]): ...
    def remove_alarm(self, handle) -> bool: ...
    def watch_file(self, fd: int, callback: Callable[[], typing.Any]) -> int: ...
    def remove_watch_file(self, handle: int) -> bool: ...
    def enter_idle(self, callback: Callable[[], typing.Any]) -> int: ...
    def remove_enter_idle(self, handle) -> bool: ...
    def run(self) -> None: ...
    def handle_exit(
        self, f: Callable[_Spec, _T], enable_idle: bool = ...
    ) -> Callable[_Spec, _T | None]: ...
