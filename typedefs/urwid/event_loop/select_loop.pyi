import typing
from collections.abc import Callable

from .abstract_loop import EventLoop

class SelectEventLoop(EventLoop):
    def __init__(self) -> None: ...
    def alarm(
        self, seconds: float, callback: Callable[[], typing.Any]
    ) -> tuple[float, int, Callable[[], typing.Any]]: ...
    def remove_alarm(
        self, handle: tuple[float, int, Callable[[], typing.Any]]
    ) -> bool: ...
    def watch_file(self, fd: int, callback: Callable[[], typing.Any]) -> int: ...
    def remove_watch_file(self, handle: int) -> bool: ...
    def enter_idle(self, callback: Callable[[], typing.Any]) -> int: ...
    def remove_enter_idle(self, handle: int) -> bool: ...
    def run(self) -> None: ...
