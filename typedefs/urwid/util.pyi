# mypy: ignore-errors

import typing
from _typeshed import Incomplete
from typing_extensions import Self
from urwid import escape as escape

str_util: Incomplete
calc_text_pos: Incomplete
calc_width: Incomplete
is_wide_char: Incomplete
move_next_char: Incomplete
move_prev_char: Incomplete
within_double_byte: Incomplete

def detect_encoding() -> str: ...

detected_encoding: Incomplete

def set_encoding(encoding) -> None: ...
def get_encoding_mode(): ...
def apply_target_encoding(s: str | bytes): ...
def supports_unicode(): ...
def calc_trim_text(
    text, start_offs: int, end_offs: int, start_col: int, end_col: int
): ...
def trim_text_attr_cs(text, attr, cs, start_col: int, end_col: int): ...
def rle_get_at(rle, pos: int): ...
def rle_subseg(rle, start: int, end: int): ...
def rle_len(rle) -> int: ...
def rle_prepend_modify(rle, a_r) -> None: ...
def rle_append_modify(rle, a_r) -> None: ...
def rle_join_modify(rle, rle2) -> None: ...
def rle_product(rle1, rle2): ...
def rle_factor(rle): ...

class TagMarkupException(Exception): ...

def decompose_tagmarkup(tm): ...
def is_mouse_event(ev: tuple[str, int, int, int] | typing.Any) -> bool: ...
def is_mouse_press(ev: str) -> bool: ...

class MetaSuper(type):
    def __init__(cls, name: str, bases, d) -> None: ...

def int_scale(val: int, val_range: int, out_range: int): ...

class StoppingContext:
    def __init__(self, wrapped) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, *exc_info) -> None: ...
