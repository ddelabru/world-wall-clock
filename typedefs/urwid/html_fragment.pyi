import typing

from typing_extensions import Literal
from urwid import util as util
from urwid.display_common import AttrSpec as AttrSpec, BaseScreen as BaseScreen
from urwid.event_loop import ExitMainLoop as ExitMainLoop

class HtmlGeneratorSimulationError(Exception): ...

class HtmlGenerator(BaseScreen):
    fragments: typing.ClassVar[list[str]]
    sizes: typing.ClassVar[list[tuple[int, int]]]
    keys: typing.ClassVar[list[list[str] | tuple[list[str], list[int]]]]
    started: bool
    colors: int
    bright_is_bold: bool
    has_underline: bool
    def __init__(self) -> None: ...
    def set_terminal_properties(
        self,
        colors: int | None = ...,
        bright_is_bold: bool | None = ...,
        has_underline: bool | None = ...,
    ) -> None: ...
    def set_mouse_tracking(self, enable: bool = ...) -> None: ...
    def set_input_timeouts(self, *args) -> None: ...
    def reset_default_terminal_palette(self, *args) -> None: ...
    def draw_screen(self, size, r) -> None: ...
    def clear(self) -> None: ...
    def get_cols_rows(self): ...
    @typing.overload
    def get_input(self, raw_keys: Literal[False]) -> list[str]: ...
    @typing.overload
    def get_input(self, raw_keys: Literal[True]) -> tuple[list[str], list[int]]: ...

def html_span(s, aspec, cursor: int = ...): ...
def html_escape(text: str) -> str: ...
def screenshot_init(sizes: list[tuple[int, int]], keys: list[list[str]]) -> None: ...
def screenshot_collect(): ...
