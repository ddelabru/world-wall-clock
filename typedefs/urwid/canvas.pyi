# mypy: ignore-errors

import typing
from collections.abc import Generator, Sequence

from _typeshed import Incomplete
from urwid.text_layout import LayoutSegment as LayoutSegment, trim_line as trim_line
from urwid.util import (
    apply_target_encoding as apply_target_encoding,
    calc_text_pos as calc_text_pos,
    calc_width as calc_width,
    rle_append_modify as rle_append_modify,
    rle_join_modify as rle_join_modify,
    rle_len as rle_len,
    rle_product as rle_product,
    trim_text_attr_cs as trim_text_attr_cs,
)

from .widget import Widget as Widget

class CanvasCache:
    hits: int
    fetches: int
    cleanups: int
    @classmethod
    def store(cls, wcls, canvas): ...
    @classmethod
    def fetch(cls, widget, wcls, size, focus): ...
    @classmethod
    def invalidate(cls, widget) -> None: ...
    @classmethod
    def cleanup(cls, ref) -> None: ...
    @classmethod
    def clear(cls) -> None: ...

class CanvasError(Exception): ...

class Canvas:
    cacheable: bool
    coords: Incomplete
    shortcuts: Incomplete
    def __init__(
        self,
        value1: typing.Any = ...,
        value2: typing.Any = ...,
        value3: typing.Any = ...,
    ) -> None: ...
    def finalize(
        self, widget: Widget, size: tuple | tuple[int] | tuple[int, int], focus: bool
    ) -> None: ...
    @property
    def widget_info(self): ...
    @property
    def text(self) -> list[bytes]: ...
    def content(
        self,
        trim_left: int = ...,
        trim_top: int = ...,
        cols: int | None = ...,
        rows: int | None = ...,
        attr: Incomplete | None = ...,
    ): ...
    def cols(self) -> None: ...
    def rows(self) -> None: ...
    def content_delta(self) -> None: ...
    def get_cursor(self) -> tuple[int, int] | None: ...
    def set_cursor(self, c) -> None: ...
    cursor: Incomplete
    def get_pop_up(self): ...
    def set_pop_up(
        self, w: Widget, left: int, top: int, overlay_width: int, overlay_height: int
    ): ...
    def translate_coords(self, dx: int, dy: int): ...

class TextCanvas(Canvas):
    cursor: Incomplete
    def __init__(
        self,
        text: Sequence[bytes] | None = ...,
        attr: Incomplete | None = ...,
        cs: Incomplete | None = ...,
        cursor: tuple[int, int] | None = ...,
        maxcol: int | None = ...,
        check_width: bool = ...,
    ) -> None: ...
    def rows(self) -> int: ...
    def cols(self) -> int: ...
    def translated_coords(self, dx: int, dy: int) -> tuple[int, int] | None: ...
    def content(
        self,
        trim_left: int = ...,
        trim_top: int = ...,
        cols: int = ...,
        rows: int = ...,
        attr_map: Incomplete | None = ...,
    ): ...
    def content_delta(self, other): ...

class BlankCanvas(Canvas):
    def __init__(self) -> None: ...
    def content(
        self,
        trim_left: int = ...,
        trim_top: int = ...,
        cols: int = ...,
        rows: int = ...,
        attr: Incomplete | None = ...,
    ): ...
    def cols(self) -> typing.NoReturn: ...
    def rows(self) -> typing.NoReturn: ...
    def content_delta(self) -> typing.NoReturn: ...

blank_canvas: Incomplete

class SolidCanvas(Canvas):
    size: Incomplete
    cursor: Incomplete
    def __init__(self, fill_char, cols: int, rows: int) -> None: ...
    def cols(self) -> int: ...
    def rows(self) -> int: ...
    def content(
        self,
        trim_left: int = ...,
        trim_top: int = ...,
        cols: int | None = ...,
        rows: int | None = ...,
        attr: Incomplete | None = ...,
    ): ...
    def content_delta(self, other): ...

class CompositeCanvas(Canvas):
    shards: Incomplete
    children: Incomplete
    def __init__(self, canv: Canvas = ...) -> None: ...
    def rows(self) -> int: ...
    def cols(self) -> int: ...
    def content(self) -> Generator[Incomplete, None, None]: ...
    def content_delta(self, other) -> Generator[Incomplete, None, None]: ...
    coords: Incomplete
    def trim(self, top: int, count: int | None = ...) -> None: ...
    def trim_end(self, end: int) -> None: ...
    def pad_trim_left_right(self, left: int, right: int) -> None: ...
    def pad_trim_top_bottom(self, top: int, bottom: int) -> None: ...
    def overlay(self, other, left: int, top: int) -> None: ...
    def fill_attr(self, a) -> None: ...
    def fill_attr_apply(self, mapping) -> None: ...
    depends_on: Incomplete
    def set_depends(self, widget_list) -> None: ...

def shard_body_row(sbody): ...
def shard_body_tail(num_rows: int, sbody): ...
def shards_delta(shards, other_shards) -> Generator[Incomplete, None, None]: ...
def shard_cviews_delta(cviews, other_cviews) -> Generator[Incomplete, None, None]: ...
def shard_body(
    cviews, shard_tail, create_iter: bool = ..., iter_default: Incomplete | None = ...
): ...
def shards_trim_top(shards, top: int): ...
def shards_trim_rows(shards, keep_rows: int): ...
def shards_trim_sides(shards, left: int, cols: int): ...
def shards_join(shard_lists): ...
def cview_trim_rows(cv, rows: int): ...
def cview_trim_top(cv, trim: int): ...
def cview_trim_left(cv, trim: int): ...
def cview_trim_cols(cv, cols: int): ...
def CanvasCombine(canvas_info): ...
def CanvasOverlay(top_c, bottom_c, left: int, top: int): ...
def CanvasJoin(canvas_info): ...
def apply_text_layout(text, attr, ls, maxcol: int): ...
