# mypy: ignore-errors

import typing
from _typeshed import Incomplete
from collections.abc import Generator, Iterable
from typing_extensions import Literal
from urwid import signals as signals
from urwid.canvas import (
    CanvasCombine as CanvasCombine,
    CompositeCanvas as CompositeCanvas,
    SolidCanvas as SolidCanvas,
)
from urwid.command_map import Command as Command
from urwid.monitored_list import (
    MonitoredFocusList as MonitoredFocusList,
    MonitoredList as MonitoredList,
)
from urwid.signals import (
    connect_signal as connect_signal,
    disconnect_signal as disconnect_signal,
)
from urwid.util import is_mouse_press as is_mouse_press
from urwid.widget import (
    Sizing as Sizing,
    WHSettings as WHSettings,
    Widget as Widget,
    WidgetContainerMixin as WidgetContainerMixin,
    calculate_top_bottom_filler as calculate_top_bottom_filler,
    nocache_widget_render_instance as nocache_widget_render_instance,
    normalize_valign as normalize_valign,
)

class ListWalkerError(Exception): ...

class ListWalker(metaclass=signals.MetaSignals):
    signals: typing.ClassVar[list[str]]
    def get_focus(self): ...
    def get_next(self, position): ...
    def get_prev(self, position): ...

class SimpleListWalker(MonitoredList, ListWalker):
    focus: int
    wrap_around: Incomplete
    def __init__(
        self, contents: Iterable[typing.Any], wrap_around: bool = ...
    ) -> None: ...
    @property
    def contents(self): ...
    def set_modified_callback(self, callback) -> typing.NoReturn: ...
    def set_focus(self, position: int) -> None: ...
    def next_position(self, position: int) -> int: ...
    def prev_position(self, position: int) -> int: ...
    def positions(self, reverse: bool = ...): ...

class SimpleFocusListWalker(ListWalker, MonitoredFocusList):
    wrap_around: Incomplete
    def __init__(
        self, contents: Iterable[typing.Any], wrap_around: bool = ...
    ) -> None: ...
    def set_modified_callback(self, callback) -> typing.NoReturn: ...
    focus: Incomplete
    def append(self, item: Widget) -> None: ...
    def get_focus(self) -> tuple[Widget | None, int | None]: ...
    def set_focus(self, position: int) -> None: ...
    def next_position(self, position: int) -> int: ...
    def prev_position(self, position: int) -> int: ...
    def positions(self, reverse: bool = ...): ...

class ListBoxError(Exception): ...

class ListBox(Widget, WidgetContainerMixin):
    offset_rows: int
    inset_fraction: Incomplete
    pref_col: str
    set_focus_pending: str
    set_focus_valign_pending: Incomplete
    def __init__(self, body: ListWalker) -> None: ...
    @property
    def body(self): ...
    def __len__(self) -> int: ...
    def calculate_visible(self, size: tuple[int, int], focus: bool = ...): ...
    def render(
        self, size: tuple[int, int], focus: bool = ...
    ) -> CompositeCanvas | SolidCanvas: ...
    def get_cursor_coords(self, size: tuple[int, int]) -> tuple[int, int] | None: ...
    def set_focus_valign(
        self,
        valign: Literal["top", "middle", "bottom"]
        | tuple[Literal["fixed top", "fixed bottom", "relative"], int],
    ): ...
    def set_focus(
        self, position, coming_from: Literal["above", "below"] | None = ...
    ) -> None: ...
    def get_focus(self): ...
    @property
    def focus(self): ...
    focus_position: Incomplete
    def _contents__getitem__(self, key): ...
    @property
    def contents(self): ...
    def options(self) -> None: ...
    def shift_focus(self, size: tuple[int, int], offset_inset: int) -> None: ...
    def update_pref_col_from_focus(self, size: tuple[int, int]): ...
    def change_focus(
        self,
        size: tuple[int, int],
        position,
        offset_inset: int = ...,
        coming_from: Literal["above", "below"] | None = ...,
        cursor_coords: tuple[int, int] | None = ...,
        snap_rows: int | None = ...,
    ) -> None: ...
    def get_focus_offset_inset(self, size: tuple[int, int]) -> tuple[int, int]: ...
    def make_cursor_visible(self, size: tuple[int, int]) -> None: ...
    def keypress(self, size: tuple[int, int], key: str) -> str | None: ...
    def mouse_event(
        self, size: tuple[int, int], event, button: int, col: int, row: int, focus: bool
    ) -> bool | None: ...
    def ends_visible(self, size: tuple[int, int], focus: bool = ...): ...
    def __iter__(self): ...
    def __reversed__(self) -> Generator[Incomplete, None, None]: ...
