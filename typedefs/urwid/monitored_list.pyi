# mypy: ignore-errors

import typing
from _typeshed import Incomplete
from collections.abc import Callable as Callable
from typing_extensions import ParamSpec

ArgSpec = ParamSpec("ArgSpec")
Ret = typing.TypeVar("Ret")

class MonitoredList(list):
    def set_modified_callback(self, callback) -> None: ...
    __add__: Incomplete
    __delitem__: Incomplete
    __iadd__: Incomplete
    __imul__: Incomplete
    __rmul__: Incomplete
    __setitem__: Incomplete
    append: Incomplete
    extend: Incomplete
    insert: Incomplete
    pop: Incomplete
    remove: Incomplete
    reverse: Incomplete
    sort: Incomplete
    clear: Incomplete

class MonitoredFocusList(MonitoredList):
    def __init__(self, *argl, **argd) -> None: ...
    @property
    def focus(self) -> int | None: ...
    def set_focus_changed_callback(
        self, callback: Callable[[int], typing.Any]
    ) -> None: ...
    def set_validate_contents_modified(self, callback) -> None: ...
    def __delitem__(self, y: int | slice): ...
    def __setitem__(self, i: int | slice, y): ...
    def __imul__(self, n: int): ...
    def append(self, item): ...
    def extend(self, items): ...
    def insert(self, index: int, item): ...
    def pop(self, index: int = ...): ...
    def remove(self, value): ...
    def reverse(self): ...
    def sort(self, **kwargs): ...
    def clear(self): ...
