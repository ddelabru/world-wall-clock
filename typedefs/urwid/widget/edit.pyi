# mypy: ignore-errors

import typing

from _typeshed import Incomplete
from typing_extensions import Literal
from urwid import text_layout as text_layout
from urwid.canvas import CompositeCanvas as CompositeCanvas, TextCanvas as TextCanvas
from urwid.command_map import Command as Command
from urwid.split_repr import remove_defaults as remove_defaults
from urwid.util import (
    decompose_tagmarkup as decompose_tagmarkup,
    is_wide_char as is_wide_char,
    move_next_char as move_next_char,
    move_prev_char as move_prev_char,
)

from .constants import Align as Align, WrapMode as WrapMode
from .text import Text as Text, TextError as TextError

class EditError(TextError): ...

class Edit(Text):
    ignore_focus: bool
    signals: typing.ClassVar[list[str]]
    def valid_char(self, ch: str) -> bool: ...
    multiline: Incomplete
    allow_tab: Incomplete
    highlight: Incomplete
    def __init__(
        self,
        caption: str = ...,
        edit_text: str | bytes = ...,
        multiline: bool = ...,
        align: Literal["left", "center", "right"] | Align = ...,
        wrap: Literal["space", "any", "clip", "ellipsis"] | WrapMode = ...,
        allow_tab: bool = ...,
        edit_pos: int | None = ...,
        layout: Incomplete | None = ...,
        mask: str | bytes | None = ...,
    ) -> None: ...
    def get_text(self): ...
    def set_text(self, markup) -> None: ...
    def get_pref_col(self, size: tuple[int]) -> int: ...
    def set_caption(self, caption) -> None: ...
    @property
    def caption(self) -> str: ...
    pref_col_maxcol: Incomplete
    def set_edit_pos(self, pos: int) -> None: ...
    edit_pos: Incomplete
    def set_mask(self, mask: str | bytes | None) -> None: ...
    def set_edit_text(self, text: str | bytes) -> None: ...
    def get_edit_text(self) -> str: ...
    edit_text: Incomplete
    def insert_text(self, text: str | bytes) -> None: ...
    def insert_text_result(self, text: str | bytes) -> tuple[str | bytes, int]: ...
    def keypress(self, size: tuple[int], key: str) -> str | None: ...
    def move_cursor_to_coords(
        self, size: tuple[int], x: int | Literal[Align.LEFT, Align.RIGHT], y: int
    ) -> bool: ...
    def mouse_event(
        self, size: tuple[int], event, button: int, x: int, y: int, focus: bool
    ) -> bool: ...
    def render(
        self, size: tuple[int], focus: bool = ...
    ) -> TextCanvas | CompositeCanvas: ...
    def get_line_translation(self, maxcol: int, ta: Incomplete | None = ...): ...
    def get_cursor_coords(self, size: tuple[int]) -> tuple[int, int]: ...
    def position_coords(self, maxcol: int, pos) -> tuple[int, int]: ...

class IntEdit(Edit):
    def valid_char(self, ch): ...
    def __init__(self, caption: str = ..., default: int | str | None = ...) -> None: ...
    def keypress(self, size: tuple[int], key: str) -> str | None: ...
    def value(self) -> int: ...
