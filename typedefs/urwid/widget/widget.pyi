# mypy: ignore-errors

from collections.abc import Callable as Callable

from _typeshed import Incomplete
from urwid import signals as signals
from urwid.canvas import CanvasCache as CanvasCache, CompositeCanvas as CompositeCanvas
from urwid.command_map import command_map as command_map
from urwid.split_repr import split_repr as split_repr
from urwid.util import MetaSuper as MetaSuper

from .constants import Sizing as Sizing

class WidgetMeta(MetaSuper, signals.MetaSignals):
    def __init__(cls, name, bases, d) -> None: ...

class WidgetError(Exception): ...

def validate_size(widget, size, canv) -> None: ...
def cache_widget_render(cls): ...
def nocache_widget_render(cls): ...
def nocache_widget_render_instance(self): ...
def cache_widget_rows(cls): ...

class Widget(metaclass=WidgetMeta):
    def selectable(self): ...
    def sizing(self): ...
    def pack(
        self, size: tuple | tuple[int] | tuple[int, int], focus: bool = ...
    ) -> tuple[int, int]: ...
    @property
    def base_widget(self) -> Widget: ...
    @property
    def focus(self) -> Widget | None: ...
    focus_position: Incomplete

class FlowWidget(Widget):
    def __init__(self, *args, **kwargs) -> None: ...
    def rows(self, size: int, focus: bool = ...) -> int: ...
    def render(self, size: tuple[int], focus: bool = ...): ...

class BoxWidget(Widget):
    def __init__(self, *args, **kwargs) -> None: ...
    def render(self, size: tuple[int, int], focus: bool = ...): ...

def fixed_size(size) -> None: ...

class FixedWidget(Widget):
    def __init__(self, *args, **kwargs) -> None: ...
    def render(self, size, focus: bool = ...) -> None: ...
    def pack(self, size: Incomplete | None = ..., focus: bool = ...) -> None: ...

def delegate_to_widget_mixin(attribute_name: str): ...

class WidgetWrapError(Exception): ...

class WidgetWrap(Incomplete, Widget):
    def __init__(self, w: Widget) -> None: ...
