# mypy: ignore-errors

from .columns import Columns as Columns
from .constants import Align as Align, Sizing as Sizing, WHSettings as WHSettings
from .container import (
    WidgetContainerListContentsMixin as WidgetContainerListContentsMixin,
    WidgetContainerMixin as WidgetContainerMixin,
)
from .divider import Divider as Divider
from .padding import Padding as Padding
from .pile import Pile as Pile
from .widget import Widget as Widget, WidgetWrap as WidgetWrap
from _typeshed import Incomplete
from collections.abc import Iterable
from typing_extensions import Literal
from urwid.monitored_list import (
    MonitoredFocusList as MonitoredFocusList,
    MonitoredList as MonitoredList,
)

class GridFlowError(Exception): ...

class GridFlow(WidgetWrap, WidgetContainerMixin, WidgetContainerListContentsMixin):
    def sizing(self): ...
    h_sep: Incomplete
    v_sep: Incomplete
    align: Incomplete
    def __init__(
        self,
        cells: Iterable[Widget],
        cell_width: int,
        h_sep: int,
        v_sep: int,
        align: Literal["left", "center", "right"]
        | Align
        | tuple[Literal["relative", WHSettings.RELATIVE], int],
    ) -> None: ...
    @property
    def cells(self): ...
    @property
    def cell_width(self) -> int: ...
    @property
    def contents(self): ...
    @contents.setter
    def contents(self, c): ...
    def options(
        self,
        width_type: Literal["given", WHSettings.GIVEN] = ...,
        width_amount: int | None = ...,
    ) -> tuple[Literal[WHSettings.GIVEN], int]: ...
    def set_focus(self, cell: Widget | int) -> None: ...
    @property
    def focus(self) -> Widget | None: ...
    def get_focus(self): ...
    @property
    def focus_cell(self): ...
    @property
    def focus_position(self) -> int | None: ...
    def get_display_widget(self, size: tuple[int]) -> Divider | Pile: ...
    def generate_display_widget(self, size: tuple[int]) -> Divider | Pile: ...
    def keypress(self, size: tuple[int], key: str) -> str | None: ...
    def rows(self, size: tuple[int], focus: bool = ...) -> int: ...
    def render(self, size: tuple[int], focus: bool = ...): ...
    def get_cursor_coords(self, size: tuple[int]) -> tuple[int, int]: ...
    def move_cursor_to_coords(self, size: tuple[int], col: int, row: int): ...
    def mouse_event(
        self, size: tuple[int], event, button: int, col: int, row: int, focus: bool
    ) -> Literal[True]: ...
    def get_pref_col(self, size: tuple[int]): ...
